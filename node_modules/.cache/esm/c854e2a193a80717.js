let mongoose,LessonSchema;_93a‍.x([["addNewLesson",()=>addNewLesson],["getLessons",()=>getLessons],["getLessonById",()=>getLessonById],["changeLesson",()=>changeLesson],["deleteLesson",()=>deleteLesson]]);_93a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_93a‍.w("../models/lessons",[["LessonSchema",["LessonSchema"],function(v){LessonSchema=v}]]);

const Lessons = mongoose.model('Lessons', LessonSchema);

       const addNewLesson =(req,res)=>{
    let newLesson = new Lessons(req.body);
    newLesson .save((err, lessons) => {
        if (err) {
            return res.send(404, `we have problem with db ${err}`);;
        }
        res.json(lessons);
    });
};
       const getLessons = (req, res) => {
    Lessons.find({}, (err, lessons) => {
        if (err) {
            return res.send(404, `we have problem with db ${err}`);;
        }
        res.json(lessons);
    });

}
       const getLessonById = (req, res) => {
    Lessons.findById(req.params.lessonsID, (err, lessons) => {
        if (err) {
            return res.send(404, `we have problem with db ${err}`);;
        }
        res.json(lessons);
    });
}

       const changeLesson = (req, res) => {
    Lessons.findOneAndUpdate({ _id: req.params.lessonsID}, req.body, { new: true, useFindAndModify: false }, (err, lessons) => {
        if (err) {
            res.send(err);
        }
        res.json(lessons);
    });
}

       const deleteLesson = (req, res) => {
    Lessons.remove({ _id: req.params.lessonsID}, (err, student) => {
        if (err) {
            res.send(err);
        }
        res.json({ message: 'successfuly deleted lessons'});
    });
}